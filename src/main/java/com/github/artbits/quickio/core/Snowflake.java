/**
 * Copyright 2022 Zhang Guanhu
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.github.artbits.quickio.core;

final class Snowflake {

    //Start time cutoff (January 1, 2015)
    private final static long epoch = 1420041600000L;

    //Number of digits occupied by the machine ID
    private final static long workerIdBits = 5L;

    //Number of digits occupied by data ID
    private final static long datacenterIdBits = 5L;

    //The maximum machine ID supported is 31
    // (this shift algorithm can quickly calculate
    // the maximum decimal number represented by
    // several binary numbers)
    private final static long maxWorkerId = ~(-1L << workerIdBits);

    //The maximum supported data ID is 31
    private final static long maxDatacenterId = ~(-1L << datacenterIdBits);

    //Number of digits occupied by the sequence in the ID
    private final static long sequenceBits = 12L;

    //Machine ID moves 12 bits to the left
    private final static long workerIdShift = sequenceBits;

    //Move the data ID 17 bits to the left (12+5)
    private final static long datacenterIdShift = sequenceBits + workerIdBits;

    //Move the time cutoff 22 bits to the left (5+5+12)
    private final static long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;

    //The mask of the generated sequence, which is 4095 (0b1111111111111=0xfff=4095)
    private final static long sequenceMask = ~(-1L << sequenceBits);

    //Working machine ID (0~31)
    private final long workerId;

    //Data center ID (0~31)
    private final long datacenterId;

    //Sequence in milliseconds (0~4095)
    private long sequence = 0L;

    //Last ID generation time
    private long lastTimestamp = -1L;


    //workerId(0 ~ 31), datacenterId(0 ~ 31)
    Snowflake(long workerId, long datacenterId) {
        if (workerId > maxWorkerId || workerId < 0) {
            throw new IllegalArgumentException(String.format("worker Id " +
                    "can't be greater than %d or less than 0", maxWorkerId));
        }
        if (datacenterId > maxDatacenterId || datacenterId < 0) {
            throw new IllegalArgumentException(String.format("datacenter Id " +
                    "can't be greater than %d or less than 0", maxDatacenterId));
        }
        this.workerId = workerId;
        this.datacenterId = datacenterId;
    }


    //Block to the next millisecond until a new timestamp is obtained
    //lastTimestamp:  Last ID generation time
    private long tilNextMillis(long lastTimestamp) {
        long timestamp = timeGen();
        while (timestamp <= lastTimestamp) {
            timestamp = timeGen();
        }
        return timestamp;
    }


    //Returns the current time in milliseconds (milliseconds)
    private long timeGen() {
        return System.currentTimeMillis();
    }


    //Get the next ID (this method is thread safe)
    synchronized long nextId() {
        long timestamp = timeGen();

        //If the current time is less than the timestamp generated by the last ID,
        // it means that the system clock should throw an exception when it goes back
        if (timestamp < lastTimestamp) {
            throw new RuntimeException(String.format("Clock moved backwards.  " +
                    "Refusing to generate id for %d milliseconds", lastTimestamp - timestamp));
        }

        //If it is generated at the same time, sequence within milliseconds
        if (lastTimestamp == timestamp) {
            sequence = (sequence + 1) & sequenceMask;
            //Sequence overflow in milliseconds
            if (sequence == 0) {
                //Block to the next millisecond to obtain a new timestamp
                timestamp = tilNextMillis(lastTimestamp);
            }
        }
        //Timestamp change, sequence reset within milliseconds
        else {
            sequence = 0L;
        }

        //Last ID generation time
        lastTimestamp = timestamp;

        //The 64-bit ID is formed by shifting and or operation
        return ((timestamp - epoch) << timestampLeftShift)
                | (datacenterId << datacenterIdShift)
                | (workerId << workerIdShift)
                | sequence;
    }


    //through id activity timestamp
    long toTimestamp(long snowId) {
        String id = Long.toBinaryString(snowId);
        long timestamp = id.length() - (workerIdBits + datacenterIdBits + sequenceBits);
        String s = id.substring(0, (int) timestamp);
        return Long.parseUnsignedLong(s, 2) + epoch;
    }

}